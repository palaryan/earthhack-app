{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport ListViewDataSource from \"./ListViewDataSource\";\nimport Platform from \"../../../exports/Platform\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport findNodeHandle from \"../../../exports/findNodeHandle\";\nimport NativeModules from \"../../../exports/NativeModules\";\nimport ScrollView from \"../../../exports/ScrollView\";\nimport ScrollResponder from \"../../../modules/ScrollResponder\";\nimport StaticRenderer from \"../StaticRenderer\";\nimport TimerMixin from 'react-timer-mixin';\nimport View from \"../../../exports/View\";\nimport cloneReferencedElement from \"./cloneReferencedElement\";\nimport createReactClass from 'create-react-class';\nimport isEmpty from \"../isEmpty\";\n\nvar merge = function merge() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(args));\n};\n\nvar RCTScrollViewManager = NativeModules.ScrollViewManager;\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\nvar ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: [],\n  _sentEndForContentLength: null,\n  _scrollComponent: null,\n  _prevRenderedRowsCount: 0,\n  _visibleRows: {},\n  scrollProperties: {},\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n  statics: {\n    DataSource: ListViewDataSource\n  },\n  propTypes: _objectSpread({}, ScrollView.propTypes, {\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    renderSeparator: PropTypes.func,\n    renderRow: PropTypes.func.isRequired,\n    initialListSize: PropTypes.number.isRequired,\n    onEndReached: PropTypes.func,\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    renderSectionHeader: PropTypes.func,\n    renderScrollComponent: PropTypes.func.isRequired,\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\n    onChangeVisibleRows: PropTypes.func,\n    removeClippedSubviews: PropTypes.bool,\n    stickySectionHeadersEnabled: PropTypes.bool,\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    enableEmptySections: PropTypes.bool\n  }),\n  getMetrics: function getMetrics() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length\n    };\n  },\n  getScrollResponder: function getScrollResponder() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n  getScrollableNode: function getScrollableNode() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollComponent);\n    }\n  },\n  scrollTo: function scrollTo() {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      var _this$_scrollComponen;\n\n      (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);\n    }\n  },\n  scrollToEnd: function scrollToEnd(options) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\n      }\n    }\n  },\n  flashScrollIndicators: function flashScrollIndicators() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n  setNativeProps: function setNativeProps(props) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: function renderScrollComponent(props) {\n        return React.createElement(ScrollView, props);\n      },\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios' || Platform.OS === 'web',\n      stickyHeaderIndices: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: {}\n    };\n  },\n  getInnerViewNode: function getInnerViewNode() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this.requestAnimationFrame(function () {\n      _this._measureAndUpdateScrollProps();\n    });\n  },\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState(function (state, props) {\n        _this2._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n        };\n      }, function () {\n        return _this2._renderMoreRowsIfNeeded();\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    var _this3 = this;\n\n    this.requestAnimationFrame(function () {\n      _this3._measureAndUpdateScrollProps();\n    });\n  },\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\n    this.setState({\n      highlightedRow: {\n        sectionID: sectionID,\n        rowID: rowID\n      }\n    });\n  },\n  render: function render() {\n    var bodyComponents = [];\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n    var renderSectionHeader = this.props.renderSectionHeader;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          var warning = require('fbjs/lib/warning');\n\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\n        }\n      }\n\n      if (renderSectionHeader) {\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\n\n        if (element) {\n          bodyComponents.push(React.cloneElement(element, {\n            key: 's_' + sectionID\n          }));\n\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = React.createElement(StaticRenderer, {\n          key: 'r_' + comboID,\n          shouldUpdate: !!shouldUpdateRow,\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\n        });\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\n\n          if (separator) {\n            bodyComponents.push(React.createElement(View, {\n              key: 's_' + comboID\n            }, separator));\n            totalIndex++;\n          }\n        }\n\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var _this$props = this.props,\n        renderScrollComponent = _this$props.renderScrollComponent,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"renderScrollComponent\"]);\n\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n\n    _extends(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined\n    });\n\n    return cloneReferencedElement(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\n    }, header, bodyComponents, footer);\n  },\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\n    var scrollComponent = this.getScrollResponder();\n\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(findNodeHandle(scrollComponent), this._updateVisibleRows);\n  },\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\n    var contentLength = !this.props.horizontal ? height : width;\n\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n\n      this._updateVisibleRows();\n\n      this._renderMoreRowsIfNeeded();\n    }\n\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    var visibleLength = !this.props.horizontal ? height : width;\n\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n\n      this._updateVisibleRows();\n\n      this._renderMoreRowsIfNeeded();\n    }\n\n    this.props.onLayout && this.props.onLayout(event);\n  },\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n\n    return false;\n  },\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n  _pageInNewRows: function _pageInNewRows() {\n    var _this4 = this;\n\n    this.setState(function (state, props) {\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, function () {\n      _this4._measureAndUpdateScrollProps();\n\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\n    });\n  },\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\n    var _this5 = this;\n\n    if (!this.props.onChangeVisibleRows) {\n      return;\n    }\n\n    if (updatedFrames) {\n      updatedFrames.forEach(function (newFrame) {\n        _this5._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n\n      if (rowIDs.length === 0) {\n        continue;\n      }\n\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n\n      var visibleSection = this._visibleRows[sectionID];\n\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          totalIndex++;\n        }\n\n        if (!frame) {\n          break;\n        }\n\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n\n        if (!min && !max || min === max) {\n          break;\n        }\n\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n  _onScroll: function _onScroll(e) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  }\n});\nexport default ListView;","map":{"version":3,"sources":["C:/Users/aryan/Documents/GitHub/earthhack-app/node_modules/react-native-web/dist/vendor/react-native/ListView/index.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_objectSpread","arguments","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","obj","value","defineProperty","configurable","writable","ListViewDataSource","Platform","React","PropTypes","findNodeHandle","NativeModules","ScrollView","ScrollResponder","StaticRenderer","TimerMixin","View","cloneReferencedElement","createReactClass","isEmpty","merge","_len","args","Array","_key","assign","apply","RCTScrollViewManager","ScrollViewManager","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","displayName","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","Mixin","statics","DataSource","propTypes","dataSource","instanceOf","isRequired","renderSeparator","func","renderRow","initialListSize","number","onEndReached","onEndReachedThreshold","pageSize","renderFooter","renderHeader","renderSectionHeader","renderScrollComponent","scrollRenderAheadDistance","onChangeVisibleRows","removeClippedSubviews","bool","stickySectionHeadersEnabled","stickyHeaderIndices","arrayOf","enableEmptySections","getMetrics","contentLength","totalRows","props","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","getScrollResponder","getScrollableNode","scrollTo","_this$_scrollComponen","scrollToEnd","options","console","warn","flashScrollIndicators","setNativeProps","getDefaultProps","createElement","OS","getInitialState","highlightedRow","getInnerViewNode","UNSAFE_componentWillMount","visibleLength","offset","componentDidMount","_this","requestAnimationFrame","_measureAndUpdateScrollProps","UNSAFE_componentWillReceiveProps","nextProps","_this2","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_this3","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","header","footer","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","require","invariant","element","getSectionHeaderData","push","cloneElement","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","shouldUpdate","bind","getRowData","adjacentRowHighlighted","separator","_this$props","scrollEventThrottle","onScroll","_onScroll","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","DEPRECATED_sendUpdatedChildFrames","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","_event$nativeEvent$la","nativeEvent","layout","_maybeCallOnEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","_this4","rowsToRender","updatedFrames","_this5","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @providesModule ListView\r\n * \r\n * @format\r\n */\r\n'use strict';\r\n\r\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport ListViewDataSource from './ListViewDataSource';\r\nimport Platform from '../../../exports/Platform';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport findNodeHandle from '../../../exports/findNodeHandle';\r\nimport NativeModules from '../../../exports/NativeModules';\r\nimport ScrollView from '../../../exports/ScrollView';\r\nimport ScrollResponder from '../../../modules/ScrollResponder';\r\nimport StaticRenderer from '../StaticRenderer';\r\nimport TimerMixin from 'react-timer-mixin';\r\nimport View from '../../../exports/View';\r\nimport cloneReferencedElement from './cloneReferencedElement';\r\nimport createReactClass from 'create-react-class';\r\nimport isEmpty from '../isEmpty';\r\n\r\nvar merge = function merge() {\r\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n\r\n  return Object.assign.apply(Object, [{}].concat(args));\r\n};\r\n\r\nvar RCTScrollViewManager = NativeModules.ScrollViewManager;\r\nvar DEFAULT_PAGE_SIZE = 1;\r\nvar DEFAULT_INITIAL_ROWS = 10;\r\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\r\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\r\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\r\n/**\r\n * DEPRECATED - use one of the new list components, such as [`FlatList`](docs/flatlist.html)\r\n * or [`SectionList`](docs/sectionlist.html) for bounded memory use, fewer bugs,\r\n * better performance, an easier to use API, and more features. Check out this\r\n * [blog post](https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html)\r\n * for more details.\r\n *\r\n * ListView - A core component designed for efficient display of vertically\r\n * scrolling lists of changing data. The minimal API is to create a\r\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\r\n * array of data blobs, and instantiate a `ListView` component with that data\r\n * source and a `renderRow` callback which takes a blob from the data array and\r\n * returns a renderable component.\r\n *\r\n * Minimal example:\r\n *\r\n * ```\r\n * class MyComponent extends Component {\r\n *   constructor() {\r\n *     super();\r\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\r\n *     this.state = {\r\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\r\n *     };\r\n *   }\r\n *\r\n *   render() {\r\n *     return (\r\n *       <ListView\r\n *         dataSource={this.state.dataSource}\r\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * ListView also supports more advanced features, including sections with sticky\r\n * section headers, header and footer support, callbacks on reaching the end of\r\n * the available data (`onEndReached`) and on the set of rows that are visible\r\n * in the device viewport change (`onChangeVisibleRows`), and several\r\n * performance optimizations.\r\n *\r\n * There are a few performance operations designed to make ListView scroll\r\n * smoothly while dynamically loading potentially very large (or conceptually\r\n * infinite) data sets:\r\n *\r\n *  * Only re-render changed rows - the rowHasChanged function provided to the\r\n *    data source tells the ListView if it needs to re-render a row because the\r\n *    source data has changed - see ListViewDataSource for more details.\r\n *\r\n *  * Rate-limited row rendering - By default, only one row is rendered per\r\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\r\n *    work into smaller chunks to reduce the chance of dropping frames while\r\n *    rendering rows.\r\n */\r\n\r\nvar ListView = createReactClass({\r\n  displayName: 'ListView',\r\n  _childFrames: [],\r\n  _sentEndForContentLength: null,\r\n  _scrollComponent: null,\r\n  _prevRenderedRowsCount: 0,\r\n  _visibleRows: {},\r\n  scrollProperties: {},\r\n  mixins: [ScrollResponder.Mixin, TimerMixin],\r\n  statics: {\r\n    DataSource: ListViewDataSource\r\n  },\r\n\r\n  /**\r\n   * You must provide a renderRow function. If you omit any of the other render\r\n   * functions, ListView will simply skip rendering them.\r\n   *\r\n   * - renderRow(rowData, sectionID, rowID, highlightRow);\r\n   * - renderSectionHeader(sectionData, sectionID);\r\n   */\r\n  propTypes: _objectSpread({}, ScrollView.propTypes, {\r\n    /**\r\n     * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\r\n     */\r\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\r\n\r\n    /**\r\n     * (sectionID, rowID, adjacentRowHighlighted) => renderable\r\n     *\r\n     * If provided, a renderable component to be rendered as the separator\r\n     * below each row but not the last row if there is a section header below.\r\n     * Take a sectionID and rowID of the row above and whether its adjacent row\r\n     * is highlighted.\r\n     */\r\n    renderSeparator: PropTypes.func,\r\n\r\n    /**\r\n     * (rowData, sectionID, rowID, highlightRow) => renderable\r\n     *\r\n     * Takes a data entry from the data source and its ids and should return\r\n     * a renderable component to be rendered as the row. By default the data\r\n     * is exactly what was put into the data source, but it's also possible to\r\n     * provide custom extractors. ListView can be notified when a row is\r\n     * being highlighted by calling `highlightRow(sectionID, rowID)`. This\r\n     * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\r\n     * to control the separators above and below the highlighted row. The highlighted\r\n     * state of a row can be reset by calling highlightRow(null).\r\n     */\r\n    renderRow: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * How many rows to render on initial component mount. Use this to make\r\n     * it so that the first screen worth of data appears at one time instead of\r\n     * over the course of multiple frames.\r\n     */\r\n    initialListSize: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Called when all rows have been rendered and the list has been scrolled\r\n     * to within onEndReachedThreshold of the bottom. The native scroll\r\n     * event is provided.\r\n     */\r\n    onEndReached: PropTypes.func,\r\n\r\n    /**\r\n     * Threshold in pixels (virtual, not physical) for calling onEndReached.\r\n     */\r\n    onEndReachedThreshold: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Number of rows to render per event loop. Note: if your 'rows' are actually\r\n     * cells, i.e. they don't span the full width of your view (as in the\r\n     * ListViewGridLayoutExample), you should set the pageSize to be a multiple\r\n     * of the number of cells per row, otherwise you're likely to see gaps at\r\n     * the edge of the ListView as new pages are loaded.\r\n     */\r\n    pageSize: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * () => renderable\r\n     *\r\n     * The header and footer are always rendered (if these props are provided)\r\n     * on every render pass. If they are expensive to re-render, wrap them\r\n     * in StaticContainer or other mechanism as appropriate. Footer is always\r\n     * at the bottom of the list, and header at the top, on every render pass.\r\n     * In a horizontal ListView, the header is rendered on the left and the\r\n     * footer on the right.\r\n     */\r\n    renderFooter: PropTypes.func,\r\n    renderHeader: PropTypes.func,\r\n\r\n    /**\r\n     * (sectionData, sectionID) => renderable\r\n     *\r\n     * If provided, a header is rendered for this section.\r\n     */\r\n    renderSectionHeader: PropTypes.func,\r\n\r\n    /**\r\n     * (props) => renderable\r\n     *\r\n     * A function that returns the scrollable component in which the list rows\r\n     * are rendered. Defaults to returning a ScrollView with the given props.\r\n     */\r\n    renderScrollComponent: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * How early to start rendering rows before they come on screen, in\r\n     * pixels.\r\n     */\r\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * (visibleRows, changedRows) => void\r\n     *\r\n     * Called when the set of visible rows changes. `visibleRows` maps\r\n     * { sectionID: { rowID: true }} for all the visible rows, and\r\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\r\n     * that have changed their visibility, with true indicating visible, and\r\n     * false indicating the view has moved out of view.\r\n     */\r\n    onChangeVisibleRows: PropTypes.func,\r\n\r\n    /**\r\n     * A performance optimization for improving scroll perf of\r\n     * large lists, used in conjunction with overflow: 'hidden' on the row\r\n     * containers. This is enabled by default.\r\n     */\r\n    removeClippedSubviews: PropTypes.bool,\r\n\r\n    /**\r\n     * Makes the sections headers sticky. The sticky behavior means that it\r\n     * will scroll with the content at the top of the section until it reaches\r\n     * the top of the screen, at which point it will stick to the top until it\r\n     * is pushed off the screen by the next section header. This property is\r\n     * not supported in conjunction with `horizontal={true}`. Only enabled by\r\n     * default on iOS because of typical platform standards.\r\n     */\r\n    stickySectionHeadersEnabled: PropTypes.bool,\r\n\r\n    /**\r\n     * An array of child indices determining which children get docked to the\r\n     * top of the screen when scrolling. For example, passing\r\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\r\n     * top of the scroll view. This property is not supported in conjunction\r\n     * with `horizontal={true}`.\r\n     */\r\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n\r\n    /**\r\n     * Flag indicating whether empty section headers should be rendered. In the future release\r\n     * empty section headers will be rendered by default, and the flag will be deprecated.\r\n     * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\r\n     */\r\n    enableEmptySections: PropTypes.bool\r\n  }),\r\n\r\n  /**\r\n   * Exports some data, e.g. for perf investigations or analytics.\r\n   */\r\n  getMetrics: function getMetrics() {\r\n    return {\r\n      contentLength: this.scrollProperties.contentLength,\r\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\r\n      renderedRows: this.state.curRenderedRowsCount,\r\n      visibleRows: Object.keys(this._visibleRows).length\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Provides a handle to the underlying scroll responder.\r\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\r\n   * need to check that it responds to `getScrollResponder` before calling it.\r\n   */\r\n  getScrollResponder: function getScrollResponder() {\r\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\r\n      return this._scrollComponent.getScrollResponder();\r\n    }\r\n  },\r\n  getScrollableNode: function getScrollableNode() {\r\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\r\n      return this._scrollComponent.getScrollableNode();\r\n    } else {\r\n      return findNodeHandle(this._scrollComponent);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\r\n   *\r\n   * See `ScrollView#scrollTo`.\r\n   */\r\n  scrollTo: function scrollTo() {\r\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\r\n      var _this$_scrollComponen;\r\n\r\n      (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * If this is a vertical ListView scrolls to the bottom.\r\n   * If this is a horizontal ListView scrolls to the right.\r\n   *\r\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\r\n   * `scrollToEnd({animated: false})` for immediate scrolling.\r\n   * If no options are passed, `animated` defaults to true.\r\n   *\r\n   * See `ScrollView#scrollToEnd`.\r\n   */\r\n  scrollToEnd: function scrollToEnd(options) {\r\n    if (this._scrollComponent) {\r\n      if (this._scrollComponent.scrollToEnd) {\r\n        this._scrollComponent.scrollToEnd(options);\r\n      } else {\r\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Displays the scroll indicators momentarily.\r\n   *\r\n   * @platform ios\r\n   */\r\n  flashScrollIndicators: function flashScrollIndicators() {\r\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\r\n      this._scrollComponent.flashScrollIndicators();\r\n    }\r\n  },\r\n  setNativeProps: function setNativeProps(props) {\r\n    if (this._scrollComponent) {\r\n      this._scrollComponent.setNativeProps(props);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * React life cycle hooks.\r\n   */\r\n  getDefaultProps: function getDefaultProps() {\r\n    return {\r\n      initialListSize: DEFAULT_INITIAL_ROWS,\r\n      pageSize: DEFAULT_PAGE_SIZE,\r\n      renderScrollComponent: function renderScrollComponent(props) {\r\n        return React.createElement(ScrollView, props);\r\n      },\r\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\r\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\r\n      stickySectionHeadersEnabled: Platform.OS === 'ios' || Platform.OS === 'web',\r\n      stickyHeaderIndices: []\r\n    };\r\n  },\r\n  getInitialState: function getInitialState() {\r\n    return {\r\n      curRenderedRowsCount: this.props.initialListSize,\r\n      highlightedRow: {}\r\n    };\r\n  },\r\n  getInnerViewNode: function getInnerViewNode() {\r\n    return this._scrollComponent.getInnerViewNode();\r\n  },\r\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\r\n    // this data should never trigger a render pass, so don't put in state\r\n    this.scrollProperties = {\r\n      visibleLength: null,\r\n      contentLength: null,\r\n      offset: 0\r\n    };\r\n    this._childFrames = [];\r\n    this._visibleRows = {};\r\n    this._prevRenderedRowsCount = 0;\r\n    this._sentEndForContentLength = null;\r\n  },\r\n  componentDidMount: function componentDidMount() {\r\n    var _this = this;\r\n\r\n    // do this in animation frame until componentDidMount actually runs after\r\n    // the component is laid out\r\n    this.requestAnimationFrame(function () {\r\n      _this._measureAndUpdateScrollProps();\r\n    });\r\n  },\r\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\r\n    var _this2 = this;\r\n\r\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\r\n      this.setState(function (state, props) {\r\n        _this2._prevRenderedRowsCount = 0;\r\n        return {\r\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\r\n        };\r\n      }, function () {\r\n        return _this2._renderMoreRowsIfNeeded();\r\n      });\r\n    }\r\n  },\r\n  componentDidUpdate: function componentDidUpdate() {\r\n    var _this3 = this;\r\n\r\n    this.requestAnimationFrame(function () {\r\n      _this3._measureAndUpdateScrollProps();\r\n    });\r\n  },\r\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\r\n    this.setState({\r\n      highlightedRow: {\r\n        sectionID: sectionID,\r\n        rowID: rowID\r\n      }\r\n    });\r\n  },\r\n  render: function render() {\r\n    var bodyComponents = [];\r\n    var dataSource = this.props.dataSource;\r\n    var allRowIDs = dataSource.rowIdentities;\r\n    var rowCount = 0;\r\n    var stickySectionHeaderIndices = [];\r\n    var renderSectionHeader = this.props.renderSectionHeader;\r\n    var header = this.props.renderHeader && this.props.renderHeader();\r\n    var footer = this.props.renderFooter && this.props.renderFooter();\r\n    var totalIndex = header ? 1 : 0;\r\n\r\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\r\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\r\n      var rowIDs = allRowIDs[sectionIdx];\r\n\r\n      if (rowIDs.length === 0) {\r\n        if (this.props.enableEmptySections === undefined) {\r\n          /* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses\r\n           * an error found when Flow v0.54 was deployed. To see the error\r\n           * delete this comment and run Flow. */\r\n          var warning = require('fbjs/lib/warning');\r\n\r\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\r\n          continue;\r\n        } else {\r\n          var invariant = require('fbjs/lib/invariant');\r\n\r\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\r\n        }\r\n      }\r\n\r\n      if (renderSectionHeader) {\r\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\r\n\r\n        if (element) {\r\n          bodyComponents.push(React.cloneElement(element, {\r\n            key: 's_' + sectionID\r\n          }));\r\n\r\n          if (this.props.stickySectionHeadersEnabled) {\r\n            stickySectionHeaderIndices.push(totalIndex);\r\n          }\r\n\r\n          totalIndex++;\r\n        }\r\n      }\r\n\r\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\r\n        var rowID = rowIDs[rowIdx];\r\n        var comboID = sectionID + '_' + rowID;\r\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\r\n        var row = React.createElement(StaticRenderer, {\r\n          key: 'r_' + comboID,\r\n          shouldUpdate: !!shouldUpdateRow,\r\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\r\n        });\r\n        bodyComponents.push(row);\r\n        totalIndex++;\r\n\r\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\r\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\r\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\r\n\r\n          if (separator) {\r\n            bodyComponents.push(React.createElement(View, {\r\n              key: 's_' + comboID\r\n            }, separator));\r\n            totalIndex++;\r\n          }\r\n        }\r\n\r\n        if (++rowCount === this.state.curRenderedRowsCount) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (rowCount >= this.state.curRenderedRowsCount) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    var _this$props = this.props,\r\n        renderScrollComponent = _this$props.renderScrollComponent,\r\n        props = _objectWithoutPropertiesLoose(_this$props, [\"renderScrollComponent\"]);\r\n\r\n    if (!props.scrollEventThrottle) {\r\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\r\n    }\r\n\r\n    if (props.removeClippedSubviews === undefined) {\r\n      props.removeClippedSubviews = true;\r\n    }\r\n\r\n    Object.assign(props, {\r\n      onScroll: this._onScroll,\r\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\r\n      // Do not pass these events downstream to ScrollView since they will be\r\n      // registered in ListView's own ScrollResponder.Mixin\r\n      onKeyboardWillShow: undefined,\r\n      onKeyboardWillHide: undefined,\r\n      onKeyboardDidShow: undefined,\r\n      onKeyboardDidHide: undefined\r\n    });\r\n    return cloneReferencedElement(renderScrollComponent(props), {\r\n      ref: this._setScrollComponentRef,\r\n      onContentSizeChange: this._onContentSizeChange,\r\n      onLayout: this._onLayout,\r\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\r\n    }, header, bodyComponents, footer);\r\n  },\r\n\r\n  /**\r\n   * Private methods\r\n   */\r\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\r\n    var scrollComponent = this.getScrollResponder();\r\n\r\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\r\n      return;\r\n    } // RCTScrollViewManager.calculateChildFrames is not available on\r\n    // every platform\r\n\r\n\r\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(findNodeHandle(scrollComponent), this._updateVisibleRows);\r\n  },\r\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\r\n    this._scrollComponent = scrollComponent;\r\n  },\r\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\r\n    var contentLength = !this.props.horizontal ? height : width;\r\n\r\n    if (contentLength !== this.scrollProperties.contentLength) {\r\n      this.scrollProperties.contentLength = contentLength;\r\n\r\n      this._updateVisibleRows();\r\n\r\n      this._renderMoreRowsIfNeeded();\r\n    }\r\n\r\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\r\n  },\r\n  _onLayout: function _onLayout(event) {\r\n    var _event$nativeEvent$la = event.nativeEvent.layout,\r\n        width = _event$nativeEvent$la.width,\r\n        height = _event$nativeEvent$la.height;\r\n    var visibleLength = !this.props.horizontal ? height : width;\r\n\r\n    if (visibleLength !== this.scrollProperties.visibleLength) {\r\n      this.scrollProperties.visibleLength = visibleLength;\r\n\r\n      this._updateVisibleRows();\r\n\r\n      this._renderMoreRowsIfNeeded();\r\n    }\r\n\r\n    this.props.onLayout && this.props.onLayout(event);\r\n  },\r\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\r\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\r\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\r\n      this.props.onEndReached(event);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\r\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\r\n      this._maybeCallOnEndReached();\r\n\r\n      return;\r\n    }\r\n\r\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\r\n\r\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\r\n      this._pageInNewRows();\r\n    }\r\n  },\r\n  _pageInNewRows: function _pageInNewRows() {\r\n    var _this4 = this;\r\n\r\n    this.setState(function (state, props) {\r\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\r\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\r\n      return {\r\n        curRenderedRowsCount: rowsToRender\r\n      };\r\n    }, function () {\r\n      _this4._measureAndUpdateScrollProps();\r\n\r\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\r\n    });\r\n  },\r\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\r\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\r\n  },\r\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\r\n    var _this5 = this;\r\n\r\n    if (!this.props.onChangeVisibleRows) {\r\n      return; // No need to compute visible rows if there is no callback\r\n    }\r\n\r\n    if (updatedFrames) {\r\n      updatedFrames.forEach(function (newFrame) {\r\n        _this5._childFrames[newFrame.index] = merge(newFrame);\r\n      });\r\n    }\r\n\r\n    var isVertical = !this.props.horizontal;\r\n    var dataSource = this.props.dataSource;\r\n    var visibleMin = this.scrollProperties.offset;\r\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\r\n    var allRowIDs = dataSource.rowIdentities;\r\n    var header = this.props.renderHeader && this.props.renderHeader();\r\n    var totalIndex = header ? 1 : 0;\r\n    var visibilityChanged = false;\r\n    var changedRows = {};\r\n\r\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\r\n      var rowIDs = allRowIDs[sectionIdx];\r\n\r\n      if (rowIDs.length === 0) {\r\n        continue;\r\n      }\r\n\r\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\r\n\r\n      if (this.props.renderSectionHeader) {\r\n        totalIndex++;\r\n      }\r\n\r\n      var visibleSection = this._visibleRows[sectionID];\r\n\r\n      if (!visibleSection) {\r\n        visibleSection = {};\r\n      }\r\n\r\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\r\n        var rowID = rowIDs[rowIdx];\r\n        var frame = this._childFrames[totalIndex];\r\n        totalIndex++;\r\n\r\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\r\n          totalIndex++;\r\n        }\r\n\r\n        if (!frame) {\r\n          break;\r\n        }\r\n\r\n        var rowVisible = visibleSection[rowID];\r\n        var min = isVertical ? frame.y : frame.x;\r\n        var max = min + (isVertical ? frame.height : frame.width);\r\n\r\n        if (!min && !max || min === max) {\r\n          break;\r\n        }\r\n\r\n        if (min > visibleMax || max < visibleMin) {\r\n          if (rowVisible) {\r\n            visibilityChanged = true;\r\n            delete visibleSection[rowID];\r\n\r\n            if (!changedRows[sectionID]) {\r\n              changedRows[sectionID] = {};\r\n            }\r\n\r\n            changedRows[sectionID][rowID] = false;\r\n          }\r\n        } else if (!rowVisible) {\r\n          visibilityChanged = true;\r\n          visibleSection[rowID] = true;\r\n\r\n          if (!changedRows[sectionID]) {\r\n            changedRows[sectionID] = {};\r\n          }\r\n\r\n          changedRows[sectionID][rowID] = true;\r\n        }\r\n      }\r\n\r\n      if (!isEmpty(visibleSection)) {\r\n        this._visibleRows[sectionID] = visibleSection;\r\n      } else if (this._visibleRows[sectionID]) {\r\n        delete this._visibleRows[sectionID];\r\n      }\r\n    }\r\n\r\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\r\n  },\r\n  _onScroll: function _onScroll(e) {\r\n    var isVertical = !this.props.horizontal;\r\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\r\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\r\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\r\n\r\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\r\n\r\n    if (!this._maybeCallOnEndReached(e)) {\r\n      this._renderMoreRowsIfNeeded();\r\n    }\r\n\r\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\r\n      // Scrolled out of the end zone, so it should be able to trigger again.\r\n      this._sentEndForContentLength = null;\r\n    }\r\n\r\n    this.props.onScroll && this.props.onScroll(e);\r\n  }\r\n});\r\nexport default ListView;"]},"metadata":{},"sourceType":"module"}